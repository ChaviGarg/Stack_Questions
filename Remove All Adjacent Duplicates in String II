********* Stack Approach *********

class Solution {
    public String removeDuplicates(String s, int k) {
        
        Stack<Character> stack = new Stack<>();
        Stack<Integer> freq = new Stack<>();
        
        for(char c : s.toCharArray()){
            if(stack.empty() || c != stack.peek()){
                stack.push(c);
                freq.push(1);
            }
            else{
                freq.push(freq.pop() + 1);
                if(freq.peek() == k){
                    stack.pop();
                    freq.pop(); 
                }
            }
        }
        
        StringBuilder res = new StringBuilder();
        while(! stack.isEmpty()){
           char c = stack.pop();
           int n = freq.pop(); 
           for(int i=0; i < n; i++){
               res.append(c);
           }
        }
        return String.valueOf(res.reverse());
    }
}

// Time Complexity : O(n)
// Space Complexity : O(n)
