class Solution {
    public String decodeString(String s) {
        
        Stack<String> stack = new Stack<>();
        Stack<Integer> counts = new Stack<>();
        int index = 0, count = 0;
        String res = "";
        
        while(index < s.length()){
            if(Character.isDigit(s.charAt(index))){
                count = 0;
                while(Character.isDigit(s.charAt(index))){
                    count = (count * 10) + (s.charAt(index) - '0');
                    index++;
                }
                counts.push(count);
            }
            else if(s.charAt(index) == '['){
                stack.push(res);
                res = "";
                index++;
            }
            else if(s.charAt(index) == ']'){
                StringBuilder sb = new StringBuilder(stack.pop());
                int freq = counts.pop();
                for(int i=0; i < freq; i++){
                    sb.append(res);
                }
                res = sb.toString();
                index++;
            }
            else{
               res += s.charAt(index);
               index++; 
            }
        }
       return res; 
    }
}

// Time Complexity : O(n)
// Space Complexity : O(n)
