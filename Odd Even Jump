class Solution {
    public int oddEvenJumps(int[] A) {
        
        int n = A.length, res = 1;
        
        boolean[] higher = new boolean[n];
        boolean[] lower = new boolean[n];
        
        higher[n-1] = true; lower[n-1] = true;
        
        TreeMap<Integer, Integer> map = new TreeMap<>();
        
        map.put(A[n-1], n-1);
        
        for(int i = n-2; i >= 0; i--){
            Map.Entry<Integer, Integer> hi = map.ceilingEntry(A[i]);
            Map.Entry<Integer, Integer> lo = map.floorEntry(A[i]);
            if(hi != null)
                higher[i] = lower[(int)hi.getValue()];
            if(lo != null)
                lower[i] = higher[(int)lo.getValue()];
            
            if(higher[i])
                res++;
            
            map.put(A[i], i);
        }
        
        return res;
    }
}

// Time Complexity : O(n log n) , ceilingEntry and floorEntry will take O(log n)
// Space Complexity : O(n)
