******** push O(n), pop O(1) **********

class MyStack {

    /** Initialize your data structure here. */
    
    Queue<Integer> q1, q2;
    
    public MyStack() {
        q1 = new LinkedList<>();
        q2 = new LinkedList<>();
    }
    
    /** Push element x onto stack. */
    public void push(int x) {
        
        while(! q1.isEmpty())
            q2.offer(q1.poll());
        q1.offer(x);
        while(! q2.isEmpty())
            q1.offer(q2.poll());
    }
    
    /** Removes the element on top of the stack and returns that element. */
    public int pop() {
        return q1.poll();
    }
    
    /** Get the top element. */
    public int top() {
        return q1.peek();
    }
    
    /** Returns whether the stack is empty. */
    public boolean empty() {
       return q1.isEmpty(); 
    }
}

******** push O(1) , pop O(n) *********

class MyStack {

    /** Initialize your data structure here. */
    
    Queue<Integer> q1, q2;
    int front = 0;
    
    public MyStack() {
        q1 = new LinkedList<>();
        q2 = new LinkedList<>();
        front = -1;
    }
    
    /** Push element x onto stack. */
    public void push(int x) {
        front = x;
        q1.offer(x);
    }
    
    /** Removes the element on top of the stack and returns that element. */
    public int pop() {
        while(q1.size() != 1){
            front = q1.poll();
            q2.offer(front);
        }
        int removed = q1.poll();
        Queue<Integer> temp = q1;
        q1 = q2;
        q2 = temp;
        
        return removed;
    }
    
    /** Get the top element. */
    public int top() {
       return front;   
    }
    
    /** Returns whether the stack is empty. */
    public boolean empty() {
        return q1.isEmpty();
    }
}

***** push O(n) using one queue ******

 public void push(int x) {
        q1.offer(x);
        int size = q1.size();
        while(size > 1){
            q1.offer(q1.poll());
            size--;
        }
    }
