class MinStack {

    /** initialize your data structure here. */
    Stack<Integer> stack , aux;
    public MinStack() {
        
        stack = new Stack<>();
        aux = new Stack<>();
    }
    
    public void push(int x) {
        
        stack.push(x);
        if(aux.empty() || x <= aux.peek())
            aux.push(x);
    }
    
    public void pop() {
        
         int removed = stack.pop();
         if(! aux.empty() && removed == aux.peek())
            aux.pop();
    }
    
    public int top() {
        
        return stack.peek();
        
    }
    
    public int getMin() {
        
        if(! aux.empty()){
              return aux.peek();
        }
        else if(! stack.empty())
              return stack.peek(); 
        else
              return -1;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
 
 
 ****** Min Stack (Better Solution) *******
 
 class MinStack {

    /** initialize your data structure here. */
    Stack<Integer> stack , aux;
    public MinStack() {
        
        stack = new Stack<>();
        aux = new Stack<>();
    }
    
    public void push(int x) {
        
        stack.push(x);
        if(aux.empty() || x <= aux.peek())
            aux.push(x);
        else
            aux.push(aux.peek());
    }
    
    public void pop() {
         stack.pop();
         aux.pop(); 
    }
    
    public int top() {
        return stack.peek(); 
    }
    
    public int getMin() {
        
        return aux.peek();
    }
}

