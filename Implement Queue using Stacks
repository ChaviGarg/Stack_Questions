// push O(n), pop O(1)

class MyQueue {

    /** Initialize your data structure here. */
    Stack<Integer> s1, s2;
    int front = 0;
    
    public MyQueue() {
       s1 = new Stack<>();
       s2 = new Stack<>(); 
       front = -1; 
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        if(s1.isEmpty())
            front = x;
        while(! s1.isEmpty()){
            s2.push(s1.pop());
        }
        s2.push(x);
        while(! s2.isEmpty())
            s1.push(s2.pop());
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
      
       return s1.pop(); 
    }
    
    /** Get the front element. */
    public int peek() {
        return s1.peek();
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        return s1.isEmpty();
    }
}

****** push O(n) , pop O(n) ********

class MyQueue {

    /** Initialize your data structure here. */
    Stack<Integer> s1, s2;
    int front = 0;
    
    public MyQueue() {
       s1 = new Stack<>();
       s2 = new Stack<>(); 
       front = -1; 
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        if(s1.isEmpty())
            front = x;
        s1.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        while(! s1.isEmpty())
            s2.push(s1.pop()); 
        int removed = s2.pop();
        if(! s2.isEmpty())
            front = s2.peek();
        while(! s2.isEmpty())
            s1.push(s2.pop());
        
        return removed;
    }
    
    /** Get the front element. */
    public int peek() {
        return front;
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        return s1.isEmpty();
    }
}

******** push O(1) , pop O(1) amortized *********

class MyQueue {

    /** Initialize your data structure here. */
    Stack<Integer> s1, s2;
    int front = 0;
    
    public MyQueue() {
       s1 = new Stack<>();
       s2 = new Stack<>(); 
       front = -1; 
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        if(s1.isEmpty())
            front = x;
        s1.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        if(s2.isEmpty()){
            while(! s1.isEmpty()){
                s2.push(s1.pop());
            }
        }
        return s2.pop();
    }
    
    /** Get the front element. */
    public int peek() {
        if(! s2.isEmpty())
           return s2.peek();
        return front;
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        return s1.isEmpty() && s2.isEmpty();
    }
}
