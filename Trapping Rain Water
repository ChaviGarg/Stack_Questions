Main Idea :

getTotalVolume(H)

for i=1 to n
  left_max = max(H[1].....H[i])
  right_max = max(H[i].....H[n])
  water_and_building = min(left_max, right_max)
  wi = water_and_building - H[i]
  total_volume = total_volume + wi
  
return total_volume  

Time Complexity : O(n2) for every element, we have to traverse through every other element to find lmax and rmax
Space Complexity : O(1)

******* O(n) Time and O(n) Space Approach ********

class Solution {
    public int trap(int[] height) {
        
        if(height.length == 0)
            return 0;
        
        int n = height.length;
        
        int left_max[] = new int[n];
        int right_max[] = new int[n];
        
        left_max[0] = height[0];
        
        for(int i=1; i < n; i++){
            left_max[i] = Math.max(height[i], left_max[i-1]);
        }
        
        right_max[n-1] = height[n-1];
        
        for(int i = n-2; i >= 0; i--){
            right_max[i] = Math.max(height[i], right_max[i+1]);
        }
        
        int total_water = 0, w = 0;
        
        for(int i=0; i < n; i++){
            w = Math.min(left_max[i], right_max[i]) - height[i];
            total_water += w;
        }
        
       return total_water; 
    }
}

********* O(n) Time and O(1) Space, Two pointers Approach (lower envelope approach) *********

class Solution {
    public int trap(int[] height) {
        
        if(height.length == 0)
            return 0;
        
        int i=0, j = height.length-1;
        int lmax = height[0], rmax = height[j];
        int total_water = 0;
        
        while(i <= j){
            lmax = Math.max(lmax, height[i]);
            rmax = Math.max(rmax, height[j]);
            if(lmax <= rmax){
                total_water += lmax - height[i];
                i++;
            }
            else{
                total_water += rmax - height[j];
                j--;
            }
        }
      return total_water;  
    }
}


  
